{"version":3,"sources":["assets/sergei-a--heLWtuAN3c-unsplash.jpg","assets/atanas-dzhingarov-bboaGO5h5jI-unsplash.jpg","components/Navbar.jsx","components/WeatherCard.jsx","components/DailyItem.jsx","components/DailyForeCast.jsx","components/GraphPlot.jsx","components/HourlyForeCastItem.jsx","components/HourlyForecast.jsx","components/DayHighLights.jsx","App.jsx","index.js"],"names":["Navbar","getCityName","handleStyling","handleReload","location","useState","city","setCity","isDay","setIsDay","enableReload","setEnableReload","className","href","type","id","onClick","localStorage","setItem","event","placeholder","onChange","target","value","WeatherCard","props","data","result","topTemp","setTopTemp","bottomTemp","setBottomTemp","handleTempUnit","city_name","country_code","src","process","weather","icon","alt","temp","Math","round","description","Date","ts","toLocaleTimeString","app_temp","wind_spd","vis","pres","rh","dewpt","DailyItem","addClass","dailyWeather","toLocaleDateString","undefined","weekday","getDate","max_temp","low_temp","dailySettings","dots","infinite","speed","slidesToShow","slidesToScroll","DailyForeCast","map","index","GraphPlot","tempData","timeData","i","hourly","length","item","push","hours","dt","getHours","ampm","strTime","toUpperCase","options","chart","backgroundColor","height","title","text","legend","enabled","xAxis","categories","labels","style","color","fontSize","fontFamily","tickmarkPlacement","lineColor","yAxis","visible","tooltip","shared","valueSuffix","credits","plotOptions","areaspline","fillOpacity","series","lineWidth","dataLabels","align","format","fontWeight","pointPlacement","name","marker","highcharts","Highcharts","HourlyForeCastItem","clouds","wind_speed","padding","hour12","hour","hourlySettings","HourlyForecast","resultSet","summaryButton","setSummaryStatus","detailButton","setDetailButton","showGraph","setShowGraph","handleOverview","textContent","trim","hourlyWeather","DayHighLights","toLowerCase","min_temp","sunrise_ts","minute","sunset_ts","moonrise_ts","moonset_ts","position","width","cx","cy","r","fill","strokeWidth","stroke","transform","strokeDasharray","strokeDashoffset","precip","top","left","textAlign","display","justifyContent","alignItems","uv","dayStyle","backgroundImage","dayImg","backgroundRepeat","backgroundAttachment","backgroundSize","backgroundPosition","minHeight","nightStyle","nightImg","background","App","getItem","isDayStyling","setIsDayStyling","available","setAvailable","weatherData","setWeatherData","dailyWeatherData","setDailyWeatherData","hourlyWeatherData","setHourlyWeatherData","reload","setReload","currentWeather","a","axios","get","response","console","log","geoCords","cords","lat","lon","hourly_response","hourly_data","useEffect","e","loading","css","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d858baaa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sergei-a--heLWtuAN3c-unsplash.152abfa0.jpg\";","export default __webpack_public_path__ + \"static/media/atanas-dzhingarov-bboaGO5h5jI-unsplash.1a2a9a4f.jpg\";","import React, { useState } from 'react'\r\nimport './Navbar.css'\r\nfunction Navbar({getCityName,handleStyling,handleReload,location}) {\r\n    \r\n    const [city,setCity] = useState('');\r\n    const [isDay, setIsDay] = useState(false);\r\n    const [enableReload, setEnableReload] = useState(false);\r\n    \r\n    const handleIsDay = () => {\r\n        setIsDay(!isDay);\r\n    }\r\n    \r\n    const reload = () => {\r\n        setEnableReload(!enableReload);\r\n    }\r\n    const handleSearchField = (event)=>{\r\n        setCity(event.target.value);\r\n        \r\n    }\r\n\r\n    const saveCity = () => { \r\n        localStorage.setItem('city', location);\r\n    }\r\n    \r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark top__nav\">\r\n            <div className=\"container\">\r\n                <a className=\"navbar-brand\" href=\"https://www.google.com\">WeatherApp.AI</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n        \r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                {/* <div class=\"nav-flexbar\"> */}\r\n                    <ul className=\"navbar-nav ml-auto text-light\">\r\n                        <li className=\"nav-item mr-4\">\r\n                            <button className=\"bg-transparent border-0 text-light customButton\" onClick={function () { reload(); handleReload(enableReload); }}>\r\n                                <i className=\"fal fa-redo\"></i>\r\n                            </button>\r\n                        </li>\r\n                        <li className=\"nav-item mr-4\">\r\n                            <button className=\"bg-transparent border-0 text-light customButton\" onClick={saveCity}>\r\n                                <i className=\"fal fa-star\"></i>\r\n                            </button>\r\n                        </li>\r\n                        <li className=\"nav-item mr-4\">\r\n                            <button className=\"bg-transparent border-0 text-light customButton\">\r\n                                <i className=\"fal fa-thumbtack\"></i>\r\n                            </button>\r\n                        </li>\r\n                        <li className=\"nav-item mr-4\">\r\n                            <button className=\"bg-transparent border-0 text-light customButton\" onClick={function (event) { handleIsDay(); handleStyling(isDay); }}>\r\n                                <i className={`fal ${isDay?'fa-sun':'fa-moon'} `}></i>\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <div className=\"search__area\">\r\n                                <input className=\"search__field\" type=\"search\" placeholder=\"Search...\" onChange={handleSearchField} aria-label=\"Search\"/>\r\n                                <span className=\"search__button\" onClick={()=>getCityName(city)}><i className=\"fal fa-search\"></i></span>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    \r\n                {/* </div> */}\r\n            </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\nimport './WeatherCard.css'\r\n\r\nfunction WeatherCard(props) {    \r\n    const [result,setResult] = useState(props.data);\r\n    const [topTemp,setTopTemp] = useState('C');\r\n    const [bottomTemp,setBottomTemp] = useState('F');\r\n\r\n    //console.log(`https://api.openweathermap.org/data/2.5/weather?q=${props.city}&appid=${apiKey}`)\r\n    \r\n    \r\n    const handleTempUnit = (event)=>{\r\n        if(event.target.value==='C')\r\n            {\r\n                setTopTemp('C');\r\n                setBottomTemp('F');\r\n            }else{\r\n                setTopTemp('F');\r\n                setBottomTemp('C');\r\n            }\r\n    }\r\n    \r\n    return(\r\n            <div>\r\n                <div className=\"weather__card col-lg-6 mx-auto mt-3\">\r\n                    <h4>{result.city_name}, {result.country_code}</h4>\r\n                    <span className=\"flex-div\">\r\n                        <img src={`${process.env.REACT_APP_ICON_URL}${result.weather.icon}.png`} className=\"weather__card__icon\" alt=\"Icon\"/>\r\n                        <p className=\"weather__temperature\">{topTemp==='C'?result.temp:(Math.round(result.temp)* 9/5 + 32)}&deg;</p>\r\n                        <span className=\"unit__button\">\r\n                            <button className=\"active\" onClick={handleTempUnit} value={topTemp} > {topTemp} </button>\r\n                            <button onClick={handleTempUnit} value={bottomTemp}> {bottomTemp} </button>\r\n                        </span>\r\n                    </span>\r\n                    <span className=\"weather__description\"> {result.weather.description}</span>\r\n                    <p className=\"weather__time\">Updated as of {new Date(result.ts*1000).toLocaleTimeString()}</p>\r\n\r\n                    <span className=\"weather__widgets\">\r\n                        <p>Feels Like {result.app_temp?Math.round(result.app_temp):'--'}&deg;</p>\r\n                        <p>\r\n                            Wind <i className=\"fas fa-location-arrow\"></i> {result.wind_spd?Math.round(result.wind_spd*3.6):'--'} m/s\r\n                        </p>\r\n                        <p>Visibility {result.vis?result.vis:'--'} km</p>\r\n                    </span>\r\n                    <span className=\"weather__widgets spacing\">\r\n                        <p>Barometer {result.pres?result.pres:'--'} mb</p>\r\n                        <p>Humidity {result.rh?result.rh:'--'}%</p>\r\n                        <p>Dew Point {result.dewpt?result.dewpt:'--'} &deg;</p>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React from 'react'\r\nimport './DailyItem.css'\r\n// import HourlyForecast from './HourlyForecast'\r\nfunction DailyItem(props) {\r\n    return (\r\n        <div className={`daily__item col ${props.addClass}`}>\r\n            <p>{new Date(props.dailyWeather.ts * 1000).toLocaleDateString(undefined,{weekday:'short'})} {new Date(props.dailyWeather.ts * 1000).getDate()}</p>\r\n            <img src={`https://www.weatherbit.io/static/img/icons/${props.dailyWeather.weather.icon}.png`} alt=\"\" className=\"daily__item__icon\"/>\r\n            <span className=\"daily__item__temp\">\r\n                <p className=\"weather__main\">{Math.round(props.dailyWeather.max_temp)}&deg;</p> \r\n                <p className=\"weather__secondary\">{Math.round(props.dailyWeather.low_temp)}&deg;</p>\r\n            </span>\r\n            <p className=\"weather__daily__description\">{props.dailyWeather.weather.description}</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyItem\r\n","import React, {  useState } from 'react'\r\nimport './DailyForeCast.css'\r\n\r\nimport \"slick-carousel/slick/slick.css\"; \r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\n\r\nimport Slider from 'react-slick'\r\nimport DailyItem from './DailyItem';\r\n\r\n\r\n\r\nconst dailySettings =  {\r\n    dots: false,\r\n    infinite: false,\r\n    speed: 500,\r\n    slidesToShow: 9,\r\n    slidesToScroll: 4\r\n};\r\n\r\n\r\nfunction DailyForeCast(props) {\r\n    const [data, setData] = useState(props.data.data);\r\n\r\n    return (\r\n\r\n            <div className=\"container-fluid px-5\">    \r\n                <div className=\"daily__forecast\">\r\n                    <h5>Daily</h5>\r\n                    <Slider {...dailySettings}>\r\n                        {data.map((dailyWeather,index)=>{\r\n                            if(index>=10){\r\n                                return null;\r\n                            }\r\n                            if(index===0)\r\n                                return <DailyItem dailyWeather={dailyWeather} key={index} index={index} addClass='activeDay'/>\r\n                            return <DailyItem dailyWeather={dailyWeather} key={index} index={index}/>\r\n                        })}\r\n                    </Slider>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default DailyForeCast\r\n","import React from 'react'\r\nimport './GraphPlot.css';\r\n\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\n\r\n    const GraphPlot = (props)=>{\r\n        \r\n\r\n        let tempData=[]\r\n        let timeData = []\r\n\r\n\r\n        for (let i = 0; i <= props.data.hourly.length; i++){\r\n            let item = props.data.hourly[i];\r\n            if (i % 3 === 0){\r\n                tempData.push(Math.round(item.temp - 273.15));\r\n                const date = new Date(item.dt * 1000)\r\n                var hours = date.getHours();\r\n                var ampm = hours >= 12 ? 'pm' : 'am';\r\n                hours = hours % 12;\r\n                hours = hours ? hours : 12; // the hour '0' should be '12'\r\n                var strTime = hours + ' ' + ampm.toUpperCase();\r\n                timeData.push(strTime)\r\n            }\r\n            else if (i >= 23)\r\n                break;\r\n            else\r\n                continue;\r\n                \r\n        };\r\n\r\n\r\n        const options = {\r\n            chart: {\r\n                type: 'areaspline',\r\n                backgroundColor: 'transparent',\r\n                className: 'graph-chart',\r\n                height: 270,\r\n                \r\n            },\r\n            title: {\r\n                text:null,\r\n                \r\n            },\r\n            legend: {\r\n                enabled:false,\r\n            },\r\n            xAxis: {\r\n                categories: timeData,\r\n                labels: {\r\n                    style: {\r\n                        color: 'white',\r\n                        fontSize: '12px',\r\n                        fontFamily:'sf pro display'\r\n                    },\r\n                    tickmarkPlacement:'on'\r\n                },\r\n                lineColor:'rgba(255,255,255,0.3)'\r\n            },\r\n            yAxis: {\r\n                visible:false\r\n            },\r\n            tooltip: {\r\n                shared: true,\r\n                valueSuffix: ' units',\r\n                enabled:false\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            },\r\n            plotOptions: {\r\n                areaspline: {\r\n                    fillOpacity: 0.1,\r\n                    color: 'rgba(255,255,255,0.5)',\r\n                },\r\n                series:{lineWidth:2,dataLabels:{enabled:true,align:'center',format:'{point.y} &deg;',style:{color:'white',fontSize:'15px',fontWeight:'200',fontFamily:'sf pro display'}},pointPlacement:'on'},\r\n            },\r\n            series: [{\r\n                name: 'John',\r\n                data: tempData,\r\n                marker:{enabled:false}\r\n            }]\r\n        };\r\n\r\n        \r\n    return (\r\n    <div>\r\n            <HighchartsReact highcharts={Highcharts} options={options}/>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GraphPlot\r\n","import React, { useState } from 'react'\r\nimport './HourlyForeCastItem.css'\r\nfunction HourlyForeCastItem(props) {\r\n    const [data, setData] = useState(props.data);\r\n    return (\r\n        <div>\r\n            <div className='col hourly__item'>\r\n                <img src={`${process.env.REACT_APP_HOURL_ICON}${data.weather[0].icon}.png`} alt=\"Icon\" className=\"hourly__item__icon\" />\r\n                <p className=\"hourly__main\">{Math.round(data.temp - 273.15)} &deg;</p>\r\n                <p className=\"hourly__description\">{data.weather[0].description}</p>\r\n                <span className=\"hourly__item__temp\">\r\n                    <p className=\"hourly__humidity\">\r\n                        <i className=\"fal fa-humidity\"></i> {data.clouds} %\r\n                    </p>\r\n                    <p className='hourly__wind__speed'> <i className=\"fas fa-location-arrow\"></i> {data.wind_speed} m/s</p>\r\n                </span>\r\n            </div>\r\n            <p style={{padding:'4px 10px'}}>{new Date(data.dt * 1000).toLocaleTimeString('en-US',{hour12:true,hour:'numeric'})}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HourlyForeCastItem\r\n","import React, { useEffect,useState } from 'react'\r\nimport Slider from 'react-slick';\r\nimport GraphPlot from './GraphPlot';\r\nimport './HourlyForecast.css'\r\nimport HourlyForeCastItem from './HourlyForeCastItem';\r\n\r\n\r\nconst hourlySettings =  {\r\n    dots: false,\r\n    infinite: false,\r\n    speed: 500,\r\n    slidesToShow: 9,\r\n    slidesToScroll: 9\r\n};\r\n  \r\n\r\nfunction HourlyForecast(props) {\r\n    const [resultSet, setResultSet] = useState(props.data);\r\n    const [summaryButton,setSummaryStatus] = useState('');\r\n    const [detailButton,setDetailButton] = useState('active');\r\n    const [showGraph, setShowGraph] = useState(true);\r\n\r\n     const handleOverview = (event)=>{\r\n        if(event.target.textContent.trim()==='Summary'){\r\n            setSummaryStatus('active');\r\n            setDetailButton('');\r\n            setShowGraph(false)\r\n        }\r\n        else{\r\n            setSummaryStatus('');\r\n            setDetailButton('active');\r\n            setShowGraph(true)\r\n        }\r\n    }\r\n\r\n    // console.log(resultSet.hourly);\r\n    return (\r\n        <div className=\"container-fluid px-5\">\r\n            <div className=\"hourly__forecast\">\r\n                <span className=\"hourly__forecast__header\">\r\n                    <h5>Hourly</h5>\r\n                    <span className=\"hourly__forecast__buttons\">\r\n                        <button className={summaryButton} onClick={handleOverview} >Summary <i className=\"fal fa-chart-line\"></i> </button>\r\n                        <button className={detailButton} onClick={handleOverview}>Details <i className=\"fal fa-file-alt\"></i></button>\r\n                    </span>\r\n                </span>\r\n                {\r\n                showGraph ?\r\n                <Slider {...hourlySettings}>\r\n                    {resultSet.hourly.map((hourlyWeather, index) => {\r\n                        if (index >= 24)\r\n                            return null;\r\n                        return <HourlyForeCastItem key={index} data={hourlyWeather}/>\r\n                    })}\r\n                </Slider> :\r\n                <GraphPlot data={resultSet} />\r\n                }\r\n            </div>\r\n        </div>\r\n   \r\n    )\r\n;\r\n\r\n    // useEffect(()=>{\r\n    //     const fetchHourly = async()=>{\r\n    //         const response = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude={current,minutely,daily,alert}&appid=${process.env.REACT_APP_HOURLY_FORECAST}`)\r\n    //         const result = response.data;\r\n    //         setResultSet(result);\r\n    //     }\r\n\r\n    //     fetchHourly();\r\n    // },[lat,lon])\r\n\r\n    // //console.log(lat,lon)\r\n    // const handleOverview = (event)=>{\r\n    //     if(event.target.textContent.trim()==='Summary'){\r\n    //         setSummaryStatus('active');\r\n    //         setDetailButton('');\r\n    //         setShowGraph(false)\r\n    //     }\r\n    //     else{\r\n    //         setSummaryStatus('');\r\n    //         setDetailButton('active');\r\n    //         setShowGraph(true)\r\n    //     }\r\n    // }\r\n\r\n    // return (\r\n    //         <div className='hourly__forecast'>\r\n    //             <span className=\"hourly__forecast__header\">\r\n    //                 <h5>Hourly</h5>\r\n    //                 <span className=\"hourly__forecast__buttons\">\r\n    //                     <button className={summaryButton} onClick={handleOverview} >Summary <i className=\"fal fa-chart-line\"></i> </button>\r\n    //                     <button className={detailButton} onClick={handleOverview}>Details <i className=\"fal fa-file-alt\"></i></button>\r\n    //                 </span>\r\n    //             </span>\r\n    //             {Object.keys(resultSet).length && !showGraph? \r\n    //                 <div className={`hourly__item col`}>\r\n    //                     <Slider {...settings}>\r\n    //                         {\r\n    //                             resultSet.hourly.map((result,index)=>{\r\n    //                                 if(index>=12)\r\n    //                                     return null ;\r\n    //                                 return <HourlyForeCastItem key={index} data={result}/>\r\n    //                             })\r\n    //                         }\r\n    //                     </Slider>\r\n    //                 </div>:Object.keys(resultSet).length && <GraphPlot data={resultSet}/>\r\n    //             }\r\n    //         </div>\r\n    // )\r\n}\r\n\r\nexport default HourlyForecast;\r\n","import React from \"react\";\r\nimport \"./DayHighLights.css\";\r\nfunction DayHighLights({ data }) {\r\n  // console.log(data);\r\n  return (\r\n    <div className=\"container-fluid px-5 text-left day__details\">\r\n      <h5>Day Details</h5>\r\n      <span className=\"span-col\">\r\n        <div className=\"col col-border-topped\">\r\n          <h5>Day</h5>\r\n          <p className=\"description\">\r\n            There will be mostly {data.weather.description.toLowerCase()}. The\r\n            high will be {Math.round(data.max_temp)} &deg;\r\n          </p>\r\n          <h5 className=\"mt-4\">Night</h5>\r\n          <p className=\"description\">\r\n            The skies will be {data.weather.description.toLowerCase()}. The low\r\n            will be {Math.round(data.min_temp)} &deg;\r\n          </p>\r\n        </div>\r\n        <div className=\"col col-border-topped\">\r\n          <h5>Sunrise</h5>\r\n          <p className=\"day__timings\">\r\n            {\" \"}\r\n            <i className=\"fal fa-sun custom-sun-icon-up\"></i>{\" \"}\r\n            {new Date(data.sunrise_ts * 1000).toLocaleTimeString(\"en-US\", {\r\n              hour12: true,\r\n              hour: \"numeric\",\r\n              minute: \"2-digit\",\r\n            })}\r\n          </p>\r\n          <h5>Sunset</h5>\r\n          <p className=\"day__timings\">\r\n            {\" \"}\r\n            <i className=\"fal fa-sun custom-sun-icon-down\"></i>{\" \"}\r\n            {new Date(data.sunset_ts * 1000).toLocaleTimeString(\"en-US\", {\r\n              hour12: true,\r\n              hour: \"numeric\",\r\n              minute: \"2-digit\",\r\n            })}\r\n          </p>\r\n        </div>\r\n        <div className=\"col col-border-topped\">\r\n          <h5>Moonrise</h5>\r\n          <p className=\"day__timings\">\r\n            {\" \"}\r\n            <i className=\"fal fa-moon custom-moon-icon-up\"></i>{\" \"}\r\n            {new Date(data.moonrise_ts * 1000).toLocaleTimeString(\"en-US\", {\r\n              hour12: true,\r\n              hour: \"numeric\",\r\n              minute: \"2-digit\",\r\n            })}\r\n          </p>\r\n          <h5>Moonset</h5>\r\n          <p className=\"day__timings\">\r\n            {\" \"}\r\n            <i className=\"fal fa-moon custom-moon-icon-down\"></i>{\" \"}\r\n            {new Date(data.moonset_ts * 1000).toLocaleTimeString(\"en-US\", {\r\n              hour12: true,\r\n              hour: \"numeric\",\r\n              minute: \"2-digit\",\r\n            })}\r\n          </p>\r\n          <h5>Moon Phase</h5>\r\n          <p className=\"day__timings\">\r\n            {/* <i className=\"fad fa-spinner-third\"></i> */}\r\n          </p>\r\n        </div>\r\n        <div className=\"col col-border-topped\">\r\n          <div className=\"flex-widget\">\r\n            <span>\r\n              <h5>Precipitation</h5>\r\n              <div\r\n                style={{\r\n                  position: \"relative\",\r\n                  width: \"100px\",\r\n                  height: \" 100px\",\r\n                }}\r\n              >\r\n                <svg\r\n                  style={{\r\n                    position: \"relative\",\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                  }}\r\n                >\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: 0,\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                    }}\r\n                  ></circle>\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: `calc(290 - (250 * ${data.precip}) / 100)`,\r\n                      stroke: \"rgba(0, 191, 255, 0.6)\",\r\n                    }}\r\n                  ></circle>\r\n                </svg>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    top: \"0\",\r\n                    left: \"0\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px !important\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"rgba(255, 255, 255, 0.7)\",\r\n                    position: \"absolute\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    {Math.round(data.precip)}{\" \"}\r\n                    <span style={{ fontSize: \"13px\" }}>%</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </span>\r\n            <span>\r\n              <h5>Humidity</h5>\r\n              <div\r\n                style={{\r\n                  position: \"relative\",\r\n                  width: \"100px\",\r\n                  height: \" 100px\",\r\n                }}\r\n              >\r\n                <svg\r\n                  style={{\r\n                    position: \"relative\",\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                  }}\r\n                >\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: 0,\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                    }}\r\n                  ></circle>\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: `calc(290 - (250 * ${data.rh}) / 100)`,\r\n                      stroke: \"rgba(0, 191, 255, 0.6)\",\r\n                    }}\r\n                  ></circle>\r\n                </svg>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    top: \"0\",\r\n                    left: \"0\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px !important\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"rgba(255, 255, 255, 0.7)\",\r\n                    position: \"absolute\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    {data.rh} <span style={{ fontSize: \"13px\" }}>%</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </span>\r\n          </div>\r\n          <div className=\"flex-widget\">\r\n            <span>\r\n              <h5>UV Index</h5>\r\n              <div\r\n                style={{\r\n                  position: \"relative\",\r\n                  width: \"100px\",\r\n                  height: \" 100px\",\r\n                }}\r\n              >\r\n                <svg\r\n                  style={{\r\n                    position: \"relative\",\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                  }}\r\n                >\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: 0,\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                    }}\r\n                  ></circle>\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: `calc(290 - (250 * ${data.uv}))`,\r\n                      stroke: \"rgba(0, 191, 255, 0.6)\",\r\n                    }}\r\n                  ></circle>\r\n                </svg>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    top: \"0\",\r\n                    left: \"0\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px !important\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"rgba(255, 255, 255, 0.7)\",\r\n                    position: \"absolute\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    {data.uv * 10} <br />\r\n                    <span style={{ fontSize: \"13px\" }}>\r\n                      {data.uv <= 2 && data.uv >= 0\r\n                        ? \"Low\"\r\n                        : data.uv <= 5 && data.uv >= 3\r\n                        ? \"Moderate\"\r\n                        : data.uv <= 7 && data.uv >= 6\r\n                        ? \"High\"\r\n                        : data.uv <= 10 && data.uv >= 8\r\n                        ? \"Very High\"\r\n                        : \"Extreme\"}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </span>\r\n\r\n            <span>\r\n              <h5>Max Wind</h5>\r\n              <div\r\n                style={{\r\n                  position: \"relative\",\r\n                  width: \"100px\",\r\n                  height: \" 100px\",\r\n                }}\r\n              >\r\n                <svg\r\n                  style={{\r\n                    position: \"relative\",\r\n                    width: \"100px\",\r\n                    height: \"100px\",\r\n                  }}\r\n                >\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: 0,\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                    }}\r\n                  ></circle>\r\n                  <circle\r\n                    cx=\"45\"\r\n                    cy=\"45\"\r\n                    r=\"40\"\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"100px\",\r\n                      fill: \"transparent\",\r\n                      strokeWidth: \"6\",\r\n                      stroke: \"rgba(255, 255, 255, 0.4)\",\r\n                      transform: \"translate(5px, 5px)\",\r\n                      strokeDasharray: \"290\",\r\n                      strokeDashoffset: \"290\",\r\n                      strokeDashoffset: `calc(290 - (250 * ${data.wind_spd}*3.6) / 100)`,\r\n                      stroke: \"rgba(0, 191, 255, 0.6)\",\r\n                    }}\r\n                  ></circle>\r\n                </svg>\r\n                <div\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    top: \"0\",\r\n                    left: \"0\",\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px !important\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    color: \"rgba(255, 255, 255, 0.7)\",\r\n                    position: \"absolute\",\r\n                  }}\r\n                >\r\n                  <div>\r\n                    {Math.round(data.wind_spd * 3.6)} <br />\r\n                    <span style={{ fontSize: \"13px\" }}>Km/h</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </span>\r\n      <span className=\"span-col\">\r\n        <div className=\"col col-border-topped\"></div>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DayHighLights;\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport dayImg from './assets/sergei-a--heLWtuAN3c-unsplash.jpg';\nimport nightImg from './assets/atanas-dzhingarov-bboaGO5h5jI-unsplash.jpg';\nimport axios from 'axios';\nimport Navbar from './components/Navbar';\nimport WeatherCard from './components/WeatherCard';\nimport DailyForeCast from './components/DailyForeCast'\nimport HourlyForecast from './components/HourlyForecast'\nimport DayHighLights from './components/DayHighLights';\nimport { PuffLoader } from 'react-spinners';\n\nfunction App() {\n  // ALL REQUIRED VARIABLES\n  const [city, setCity] = useState(localStorage.getItem('city')==null?'Nagpur':localStorage.getItem('city'));\n  const [isDayStyling, setIsDayStyling] = useState(true)\n  const [available, setAvailable] = useState(false);\n  const [weatherData, setWeatherData] = useState({});\n  const [dailyWeatherData, setDailyWeatherData] = useState({});\n  const [hourlyWeatherData, setHourlyWeatherData] = useState({});\n  const [reload, setReload] = useState(false);\n\n  // ALL HANDLE METHODS\n  const getCityName = (name) => {\n    setCity(name); \n    if (name.trim() === '') {\n      setCity('Nagpur');\n      localStorage.setItem('city','Nagpur');\n    }\n  }\n  const handleStyling = (event) => {\n    setIsDayStyling(event);\n  }\n  const handleReload = (e) => {\n    setReload(e);\n  }\n\n  // ALL FETCHING FUNCTIONS STARTS HERE\n  const currentWeather = async () => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_WEATHER_URL}${city}&key=${process.env.REACT_APP_API_KEY}`);\n      const result = await response.data;\n      setWeatherData(result.data[0]);\n    } catch (e) {\n      console.log(\"FROM CURRENT WEATHER\", e);\n      setCity('Nagpur');\n    }\n  }\n\n\n  const dailyWeather = async () => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_DAILY_URL}${city}&key=${process.env.REACT_APP_API_KEY}`);\n      const result = await response.data;\n      setDailyWeatherData(result);\n\n    } catch (e) {\n      console.log(\"FROM DAILY WEATHER\", e);\n    }\n  }\n\n\n  const hourlyWeather = async () => {\n    try {\n      setAvailable(false);\n      await currentWeather();\n      await dailyWeather();\n\n      const geoCords = await axios.get(`${process.env.REACT_APP_GEOCODE_URL}${city}&limit=&appid=${process.env.REACT_APP_HOURLY_FORECAST}`)\n      const cords = await geoCords.data;\n\n      const hourly_response = await axios.get(`${process.env.REACT_APP_HOURLY_URL}lat=${cords[0].lat}&lon=${cords[0].lon}&exclude=current,minutely,daily&appid=${process.env.REACT_APP_HOURLY_FORECAST}`);\n      const hourly_data = await hourly_response.data;\n      setHourlyWeatherData(hourly_data);\n      setAvailable(true);\n    } catch (e) {\n      console.log(\"FROM HOURLY WEATHER\", e);\n    }\n  }\n\n\n\n  // CALLING ALL FUNCTIONS\n  useEffect(() => {\n    hourlyWeather();\n  }, []);\n\n\n  useEffect(() => {\n    hourlyWeather();\n  }, [city]);\n\n  useEffect(() => {\n    hourlyWeather();\n  }, [reload])\n\n  return (\n    <div className=\"App\" style={isDayStyling ? dayStyle : nightStyle}>\n      <Navbar getCityName={getCityName} handleStyling={handleStyling} handleReload={handleReload} location={city}/>\n      {available === false ?\n        <PuffLoader loading={true} color=\"rgba(255,255,255,0.9)\" css={style} />\n        : <>\n          <WeatherCard city={city} data={weatherData} />\n          <DailyForeCast data={dailyWeatherData} />\n          <HourlyForecast data={hourlyWeatherData} />\n          <DayHighLights data={dailyWeatherData.data[0]} />\n          <footer id=\"sticky-footer\" className=\"flex-shrink-0 py-3\">\n            <div className=\"container text-center\">\n              <small>Copyright &copy; Reservered - Somil Bichpuriya <a href=\"/credits\">(Credits Section)</a></small>\n            </div>\n          </footer>\n        </>\n      }\n\n\n    </div>\n\n\n\n\n\n\n  );\n};\n\n\nconst dayStyle = {\n  textAlign: 'center',\n  fontFamily: \"Karla - sans-serif\",\n  backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(${dayImg})`,\n  backgroundRepeat: 'no-repeat',\n  backgroundAttachment: 'fixed',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  height: '100%',\n  minHeight: '100vh'\n}\n\n\nconst nightStyle = {\n  textAlign: 'center',\n  fontFamily: \"Karla - sans-serif\",\n  backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url(${nightImg})`,\n  backgroundRepeat: 'no-repeat',\n  backgroundAttachment: 'fixed',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  height: '100%',\n  minHeight: '100vh'\n}\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  background: 'transparent',\n  transform: 'translate(-50%,-50%)',\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}